struct VertexAttributeState  
{  
    bool                bIsEnabled = false;  
    int                 iSize = 4; //This is the number of elements in each
    attrib, 1-4.  
    unsigned int        iStride = 0;  
    VertexAttribType    eType = GL_FLOAT;  
    bool                bIsNormalized = false;  
    bool                bIsIntegral = false;  
    void *              pPtrOrBufferObjectOffset = 0;  
    BufferObject *      pBufferObj = 0;  
};  
   
struct VertexArrayObjectState
{  
    BufferObject *pElementArrayBufferObject = NULL;  
    VertexAttributeState attributes[MAX_VERTEX_ATTRIB];  
}  
   
static VertexArrayObjectState *pContextVAOState = new VertexArrayObjectState();  
static BufferObject *pCurrentArrayBuffer = NULL;

void glBindBuffer(enum target, uint buffer)  
{  
    BufferObject *pBuffer = ConvNameToBufferObj(buffer);  
   
    switch(target)  
    {  
        case GL_ARRAY_BUFFER:  
            pCurrentArrayBuffer = pBuffer;  
            break;  
        case GL_ELEMENT_ARRAY_BUFFER:  
            pContextVAOState->pElementArrayBufferObject = pBuffer;  
            break;  
        ...  
        }  
}  
   
void glEnableVertexAttribArray(uint index)  
{  
    pContextVAOState->attributes[index].bIsEnabled = true;  
}  
   
void glDisableVertexAttribArray(uint index)  
{  
    pContextVAOState->attributes[index].bIsEnabled = false;  
}  
   
void glVertexAttribPointer(uint index, int size, enum type, boolean normalized,
        sizei stride, const void *pointer)  
{  
    VertexAttributeState &currAttrib = pContextVAOState->attributes[index];  
   
    currAttrib.iSize = size;  
    currAttrib.eType = type;  
    currAttrib.iStride = stride;  
    currAttrib.bIsNormalized = normalized;  
    currAttrib.bIsIntegral = true;  
    currAttrib.pPtrOrBufferObjectOffset = pointer;  
    currAttrib.pBufferObj = pCurrentArrayBuffer;  
}
