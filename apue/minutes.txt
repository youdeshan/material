阅读apue的读书笔记

2015.10.27
chdir 更改工作目录
每当运行一个新程序时，所有的shell都为其打开3个文件描述符(file descriptor)：
1. 标准输入（standard input） – 0   (STDIN_FILENO)
2. 标准输出（standard output） – 1 (STDOUT_FILENO)
3. 标准出错（standard error） – 2   (STDERR_FILENO)
大多数shell都提供一种方法，使其中任何一个或所有这三个描述符都能重新定向到某个文件。
Eg: ls > file.list

不用缓冲的I/O: open/read/write/lseek/close

2015.11.10
标准I／O <stdio.h> getc/puts/printf/fgets

getpid() – 得到当前程序的进程ID
waitpid() – 等待进程结束

Control-D或^D是默认的文件结束符

2015.11.12
char* strerror(int errnum);   – 将errnum映射为一个出错信息字符串，并且返回此字符串的指针

void perror(const char* msg);  – 输出格式：  msg: errno对应的出错信息 换行符

2015.11.13
getuid()
getgid()

信号
终端键盘产生信号的2种方法：
1. 中断键（interrupt key, 通常是Delete或Ctrl+C）
2. 退出键(quit key, 通常是Ctrl+\)
它们被用于中断当前运行的进程。

2015.11.16
Unix系统使用2种不同的时间值：
1. 日历时间。自1970年1月1日00：00：00来国际标准时间（UTC）所经过的秒数累计值
             这些时间值可用于记录文件最近一次的修改时间，
             系统基本数据类型time_t用于保存这种时间值
                                                              
2. 进程时间(也称为CPU时间)。度量进程使用的CPU资源
             以时间滴答计算，系统基本数据类型clock_t用于保存这种时间值

2015.11.17
Unix所使用的技术是为每个系统调用在标准C库中设置一个具有同样名字的函数。
故从应用角度考虑，可将系统调用视作为C函数。

2015.11.20
ANSI: American National Standards Institute 美国国家标准学会
ISO: International Organization for Standardization 国际标准化组织
IEC: International Electrotechnical Commission 国际电子技术委员会
IEEE: Institute of Electrical and Electronics Engineers 电气与电子工程师协会

ISO
C标准的意思是提供C程序的可移植性，不仅定义了C程序设计语言的语法和语义，还定义了其标准库。
ISO／IEC 9899：1999  更新于1999年的ISO C标准，
按照该标准定义的各个头文件，可将ISO C库分成24个区：
<assert.h>                             验证程序断言
<complex.h>                            支持复数算术运算
<ctype.h>                              字符类型
<errno.h>                              出错码
<fenv.h>                               浮点环境
<float.h>                              浮点常量
<inttypes.h>                           整型格式转换
<iso646.h>                             替代关系操作符宏
<limits.h>                             实现常量
<locale.h>                             局部类别
<math.h>                               数学常量
<setjmp.h>                             非局部goto
<signal.h>                             信号
<stdarg.h>                             可变参数表
<stdbool.h>                            布尔类型和值
<stddef.h>                             标准定义
<stdint.h>                             整型
<stdio.h>                              标准I/O库
<stdlib.h>                             实用程序函数
<string.h>                             字符串操作
<tgmath.h>                             通用类型数学宏
<time.h>                               时间和日期
<wchar.h>                              扩展的多字节和宽字符支持
<wctype.h>                             宽字符分类和映射支持

POSIX: Portable Operating System Interface 可移植的操作系统接口
       提高应用程序在各种UNIX系统环境之间的可移植性。它定义了”依从POSIX的“（POSIX
       compliant）操作系统必须提供的各种服务。

Single UNIX Specification(单一UNIX规范)
        POSIX.1标准的一个超集，定义了一些附加的接口，这些接口扩展了基本的POSIX.1规范所提供的功能。
        相应的系统接口全集被称为X／Open系统接口（XSI，X/Open System Interface).
        __XOPEN_UNIX符号常量标识了（相对于POSIX.1接口而言）XSI扩展的接口。

只有遵循XSI的实现才能称为UNIX系统



运行时限制可通过调用下面3个函数中的一个而取得：
#include <unistd.h>
long sysconf(int name);                    – 以_SC_开始的常量标识name

long pathconf(const char* pathname, int name);   – 以_PC_开始的常量标识name
long fpathconf(int filedes, int name);


<sys/types.h> 定义了某些与实现有关的数据类型， 它们被称为基本数据类型（primitive
system data type）,用C的typedef功能来定义，绝大多数以_t结尾




第三章 文件I/O
open/read/write/lseek/close – unbuffered I/O,非ISO
C的组成部分，但是POSIX.1和Single Unix Specification的组成部分

3.2 文件描述符
<unistd.h>
STDIN_FILENO – 0
STDOUT_FILENO – 1
STDERR_FILENO – 2

文件描述符的变化范围： 0～OPEN_MAX

3.3 open函数
#include <fcntl.h>
int open(const char* pathname, int oflag, …);

由open返回的文件描述符一定是最小的未用描述符数值

3.4 create函数
#include <fcntl.h>
int create(const char* pathname, mode_t mode);
此函数等效于:
  open(pathname, O_WRONLY | O_CREAT | O_TRUNC, mode);
故不再需要create函数

3.5 close函数
#include <unistd.h>
int close(int filedes);
关闭一个文件时会释放该进程加在该文件上的所有记录锁
当一个进程终止时， 内核自动关闭它所有打开的文件

3.6 lseek函数
#include <unistd.h>
off_t lseek(int filedes, off_t offset, int whence);
显示地为一个打开的文件设置其偏移量
whence -- SEEK_SET/SEEK_CUR/SEEK_END

可用如下方式确定打开文件的当前偏移量：
off_t currpos = lseek(fd, 0, SEEK_CUR);

某些设备也可能允许负的偏移量，故在比较lseek的返回值时不要测试这是否小于0，而要测试它是否等于-1
lseek仅将当前的文件偏移量记录在内核中，它并不引起任何I／O操作

文件偏移量可以大于文件的当前长度，对该文件的下一次写将加长该文件，并在文件中构成一个空洞，空洞并不要求在磁盘上占用存储区。位于文件中但没有写过的字节都被读为0
如果一个文件有比较大的空洞，则有可能出现文件大小比磁盘空间（取决于文件系统的块block大小）占用大的情况,因为空洞不占用磁盘空间，但却会计算在文件大小里

3.7 read函数
#include <unistd.h>
ssize_t read(int filedes, void* buf, size_t nbytes);
若成功则返回读到的字节数
若已到文件结尾则返回0
若出错则返回-1
ssize_t/size_t -- 基本系统数据类型
ssize_t带符号，而size_t不带符号

3.8 write函数
#include <unistd.h>
ssize_t write(int filedes, const void* buf, size_t nbytes);
若成功则返回已写的字节数，若出错则返回-1

3.12 dup和dup2函数

#include <unistd.h>
int dup(int filedes);
int dup2(int filedes, int filedes2);
用来复制一个现存的文件描述符
若成功则返回新的文件描述符，若出错则返回-1

由dup返回的新文件描述符一定是当前可用文件描述符中的最小数值
dup2用filedes2参数指定新描述符的数值

这两个函数返回的新文件描述符与参数filedes共享同一文件表项

3.13 sync,fsync和fdatasync函数

为了保证磁盘上实际文件系统与缓冲区高速缓存中内容的一致性：
#include <unistd.h>
int fsync(int filedes);
对filedes指定的单一文件起作用，且等待写磁盘操作结束
可用于数据库这样的应用程序，这种应用程序需要确保将修改过的块立即写到磁盘上
会同步更新文件的属性

int fdatasync(int filedes);
类似于fsync,但只影响文件的数据部分

void sync(void); 
将所有修改过的块缓存区排入写队列之后立即返回，并不等待实际写磁盘操作结束
通常称为update的守护进程会周期性地（一般为30s)调用sync函数


3.14 fcntl函数
fcntl函数可以改变已打开的文件的性质
#include <fcntl.h>
int fcntl(int filedes, int cmd, .../* int arg */);
若成功则信赖于cmd,若出错则返回-1

fcntl函数有5种功能：
1) cmd=F_DUPFD  复制一个现有的描述符
2）cmd=F_GETFD或F_SETFD 获得／设置文件描述符标记
3）cmd=F_GETFL或F_SETFL 获得／设置文件状态标识
4) cmd=F_GETOWN或F_SETOWN 获得／设置异步I／O所有权
5) cmd=F_GETLK,F_SETLK或F_SETLKW 获得／设置记录锁

